
import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from io import BytesIO
from datetime import datetime

st.set_page_config(page_title="BusinessGraph", page_icon="üíº", layout="wide")

LANGS = {
    "kk": {
        "title": "üíº BusinessGraph",
        "subtitle": "–ö”ô—Å—ñ–ø–∫–µ—Ä–ª–µ—Ä–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω –æ–Ω–ª–∞–π–Ω –ø–∞–π–¥–∞‚Äì—à—ã“ì—ã–Ω –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã",
        "about": "–ë–∞“ì–∞, ”©–∑—ñ–Ω–¥—ñ–∫ “õ“±–Ω –∂”ô–Ω–µ —Ç“±—Ä–∞“õ—Ç—ã —à—ã“ì—ã–Ω –±–æ–π—ã–Ω—à–∞ —Ç“Ø—Å—ñ–º, —à—ã“ì—ã–Ω, –ø–∞–π–¥–∞ —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä—ã–Ω –µ—Å–µ–ø—Ç–µ–ø, –≥—Ä–∞—Ñ–∏–∫–ø–µ–Ω –∫”©—Ä—Å–µ—Ç–µ—Ç—ñ–Ω –≤–µ–±-“õ–æ—Å—ã–º—à–∞.",
        "inputs": "üìã –î–µ—Ä–µ–∫—Ç–µ—Ä",
        "price": "”®–Ω—ñ–º –±–∞“ì–∞—Å—ã (—Ç–µ“£–≥–µ)",
        "cost": "”®–∑—ñ–Ω–¥—ñ–∫ “õ“±–Ω (—Ç–µ“£–≥–µ)",
        "fixed": "–¢“±—Ä–∞“õ—Ç—ã —à—ã“ì—ã–Ω (—Ç–µ“£–≥–µ)",
        "qtymax": "–ú–∞–∫—Å–∏–º–∞–ª–¥—ã ”©–Ω—ñ–º —Å–∞–Ω—ã",
        "calc": "üìä –ï—Å–µ–ø—Ç–µ—É –∂”ô–Ω–µ –≥—Ä–∞—Ñ–∏–∫ —Å–∞–ª—É",
        "results": "–ù”ô—Ç–∏–∂–µ",
        "breakeven": "‚úÖ –ó–∏—è–Ω—Å—ã–∑–¥—ã“õ –Ω“Ø–∫—Ç–µ—Å—ñ: —à–∞–º–∞–º–µ–Ω {x0:.2f} –¥–∞–Ω–∞ ”©–Ω—ñ–º",
        "nobreakeven": "‚ö†Ô∏è ”®–Ω—ñ–º –±–∞“ì–∞—Å—ã ”©–∑—ñ–Ω–¥—ñ–∫ “õ“±–Ω–Ω–∞–Ω —Ç”©–º–µ–Ω. –ü–∞–π–¥–∞ –±–æ–ª–º–∞–π–¥—ã.",
        "chart_title": "–§—É–Ω–∫—Ü–∏—è –≥—Ä–∞—Ñ–∏–≥—ñ–Ω –∫”ô—Å—ñ–ø–æ—Ä—ã–Ω —ç–∫–æ–Ω–æ–º–∏–∫–∞—Å—ã–Ω–¥–∞ “õ–æ–ª–¥–∞–Ω—É",
        "x": "”®–Ω—ñ–º —Å–∞–Ω—ã (x)",
        "y": "–¢–µ“£–≥–µ",
        "revenue": "–¢“Ø—Å—ñ–º (T(x))",
        "costs": "–®—ã“ì—ã–Ω (S(x))",
        "profit": "–ü–∞–π–¥–∞ (P(x))",
        "download_csv": "–î–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –∂“Ø–∫—Ç–µ—É (CSV)",
        "ai_header": "ü§ñ –ñ–ò —Ç–∞–ª–¥–∞—É—ã",
        "ai_tip": "üí° –ö–µ“£–µ—Å: {tip}",
        "footer": "¬© 2025 –ü–µ—Ä–∏–∑–∞—Ç –ñ–∞“õ—Å—ã–ª—ã“õ–æ–≤–∞",
    },
    "ru": {
        "title": "üíº BusinessGraph",
        "subtitle": "–û–Ω–ª–∞–π–Ω –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏ –∏ –∏–∑–¥–µ—Ä–∂–µ–∫ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π",
        "about": "–í–µ–±‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—Ä—É—á–∫–∏, –∏–∑–¥–µ—Ä–∂–µ–∫ –∏ –ø—Ä–∏–±—ã–ª–∏ –ø–æ —Ü–µ–Ω–µ, —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º —Ä–∞—Å—Ö–æ–¥–∞–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫.",
        "inputs": "üìã –î–∞–Ω–Ω—ã–µ",
        "price": "–¶–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–µ–Ω–≥–µ)",
        "cost": "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ç–µ–Ω–≥–µ)",
        "fixed": "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (—Ç–µ–Ω–≥–µ)",
        "qtymax": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º –ø—Ä–æ–¥—É–∫—Ü–∏–∏",
        "calc": "üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫",
        "results": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã",
        "breakeven": "‚úÖ –¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏: –æ–∫–æ–ª–æ {x0:.2f} –µ–¥–∏–Ω–∏—Ü –ø—Ä–æ–¥—É–∫—Ü–∏–∏",
        "nobreakeven": "‚ö†Ô∏è –¶–µ–Ω–∞ –Ω–∏–∂–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏. –ü—Ä–∏–±—ã–ª–∏ –Ω–µ –±—É–¥–µ—Ç.",
        "chart_title": "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è",
        "x": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ (x)",
        "y": "–¢–µ–Ω–≥–µ",
        "revenue": "–í—ã—Ä—É—á–∫–∞ (T(x))",
        "costs": "–ò–∑–¥–µ—Ä–∂–∫–∏ (S(x))",
        "profit": "–ü—Ä–∏–±—ã–ª—å (P(x))",
        "download_csv": "–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (CSV)",
        "ai_header": "ü§ñ AI‚Äë–∞–Ω–∞–ª–∏–∑",
        "ai_tip": "üí° –°–æ–≤–µ—Ç: {tip}",
        "footer": "¬© 2025 –ü–µ—Ä–∏–∑–∞—Ç –ñ–∞“õ—Å—ã–ª—ã“õ–æ–≤–∞",
    }
}

lang = st.sidebar.selectbox("Language / –¢—ñ–ª", options=["kk", "ru"], format_func=lambda x: "“ö–∞–∑–∞“õ—à–∞" if x=="kk" else "–†—É—Å—Å–∫–∏–π")
T = LANGS[lang]

h1, h2 = st.columns([1,3])
with h1:
    st.image("banner.png", use_column_width=True)
with h2:
    st.markdown(f"## {T['title']}")
    st.markdown(f"**{T['subtitle']}**")
    st.caption(T["about"])

st.markdown("---")

left, right = st.columns([1,2])
with left:
    st.subheader(T["inputs"])
    price = st.number_input(T["price"], min_value=0.0, value=2000.0, step=100.0)
    cost  = st.number_input(T["cost"],  min_value=0.0, value=1200.0, step=100.0)
    fixed = st.number_input(T["fixed"], min_value=0.0, value=400000.0, step=10000.0)
    qty_max = st.slider(T["qtymax"], min_value=100, max_value=10000, value=1000, step=100)
    go = st.button(T["calc"], use_container_width=True)

with right:
    st.subheader(T["results"])
    if 'df' not in st.session_state:
        st.session_state['df'] = None

    if go:
        x = np.linspace(0, qty_max, 500)
        revenue = price * x
        costs = cost * x + fixed
        profit = revenue - costs

        df = pd.DataFrame({'x': x, 'revenue': revenue, 'costs': costs, 'profit': profit})
        st.session_state['df'] = df

        fig = go.Figure()
        fig.add_trace(go.Scatter(x=x, y=revenue, mode='lines', name=T['revenue']))
        fig.add_trace(go.Scatter(x=x, y=costs,   mode='lines', name=T['costs']))
        fig.add_trace(go.Scatter(x=x, y=profit,  mode='lines', name=T['profit']))

        if price > cost:
            x0 = fixed / (price - cost)
            y0 = price * x0
            fig.add_trace(go.Scatter(x=[x0], y=[y0], mode='markers', name='BE', marker=dict(size=10)))
            st.success(T['breakeven'].format(x0=x0))
        else:
            st.error(T['nobreakeven'])

        fig.update_layout(
            title=T['chart_title'],
            xaxis_title=T['x'],
            yaxis_title=T['y'],
            legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1),
            margin=dict(l=40, r=20, t=60, b=40)
        )
        st.plotly_chart(fig, use_container_width=True)

        csv = df.to_csv(index=False).encode('utf-8')
        st.download_button(T['download_csv'], data=csv, file_name='businessgraph_data.csv', mime='text/csv')

        st.markdown(f"### {T['ai_header']}")
        tips_kk = [
            "–ë–∞“ì–∞–Ω—ã 5‚Äì10% –∫”©—Ç–µ—Ä—É –∑–∏—è–Ω—Å—ã–∑–¥—ã“õ –Ω“Ø–∫—Ç–µ—Å—ñ–Ω –∂–∞“õ—ã–Ω–¥–∞—Ç–∞–¥—ã, –±—ñ—Ä–∞“õ —Å“±—Ä–∞–Ω—ã—Å—Ç—ã“£ ”©–∑–≥–µ—Ä—ñ—Å—ñ–Ω –µ—Å–∫–µ—Ä—ñ“£—ñ–∑.",
            "–ï–≥–µ—Ä ”©–∑—ñ–Ω–¥—ñ–∫ “õ“±–Ω–¥—ã 5% –∞–∑–∞–π—Ç—Å–∞“£—ã–∑, —Ç–∞–±—ã—Å—Ç—ã–ª—ã“õ –∞–π—Ç–∞—Ä–ª—ã“õ—Ç–∞–π ”©—Å–µ–¥—ñ.",
            "–¢“±—Ä–∞“õ—Ç—ã —à—ã“ì—ã–Ω–¥–∞—Ä –∂–æ“ì–∞—Ä—ã –±–æ–ª—Å–∞, —Å–∞—Ç—É –∫”©–ª–µ–º—ñ–Ω –∫”©–±–µ–π—Ç—ñ“£—ñ–∑: –∞–∫—Ü–∏—è/–∂–∞—Ä–Ω–∞–º–∞."
        ]
        tips_ru = [
            "–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ 5‚Äì10% –ø—Ä–∏–±–ª–∏–∑–∏—Ç —Ç–æ—á–∫—É –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏, –Ω–æ —É—á–∏—Ç—ã–≤–∞–π—Ç–µ —Å–ø—Ä–æ—Å.",
            "–ï—Å–ª–∏ —Å–Ω–∏–∑–∏—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ 5%, —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–º–µ—Ç–Ω–æ –≤—ã—Ä–∞—Å—Ç–µ—Ç.",
            "–ü—Ä–∏ –≤—ã—Å–æ–∫–∏—Ö –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–∞—Ö —É–≤–µ–ª–∏—á—å—Ç–µ –æ–±—ä—ë–º –ø—Ä–æ–¥–∞–∂: –∞–∫—Ü–∏–∏/—Ä–µ–∫–ª–∞–º–∞."
        ]
        margin = price - cost
        if margin <= 0:
            tip = tips_kk[1] if lang=='kk' else tips_ru[1]
        elif price > 0 and margin / price < 0.15:
            tip = tips_kk[0] if lang=='kk' else tips_ru[0]
        else:
            tip = tips_kk[2] if lang=='kk' else tips_ru[2]
        st.info(T['ai_tip'].format(tip=tip))

st.markdown('---')
st.caption(T['footer'])
